确定对象被使用前已先被初始化

01	对于无任何成员的内置类型，手动初始化
	eg:
	int x = 0;
	const char* text = "A C-style string";
	double d;
	std::cin >> d;

02	对于内置类型以外的其他东西，初始化责任落在构造函数上。确保每一个构造函数都将对象的每一个成员初始化。不要混淆赋值与初始化
	eg:
	class PhoneNumber{...};
	class ABEntry{
	public:
		ABEntry(const std::string& name, const std::string& address, const std::list<PhoneNumber>& phones);
	private:
		std::string theName;
		std::string theAddress;
		std::list<PhoneNumber> thePhones;
		int numTimesConsulted;
	};
	ABEntry::ABEntry(const std::string& name, const std::string& address, const std::list<PhoneNumber>& phones)
	{
		theName = name;
		theAddress = address;
		thePhones = phones;							// 这些都是进行的赋值操作，而非初始化！！！
		numTimesConsulted = 0;
	}
	
	对象的成员变量的初始化动作发生在进入构造函数的函数体之前，在 ABEntry 构造函数内， theName、theAddress、thePhones 都不是被初始化，而是被赋值。
	初始化的时间更早，发生在这些成员的 defalut 构造函数被自动调用之时。使用所谓的 member initialization list 成员初始化列表替换赋值动作
	
	ABEntry::ABEntry(const std::string& name, const std::string& address, const std::list<PhoneNumber>& phones): theName(name), theAddress(address), thePhones(phones), numTimesConsulted(0) 	// 这些都是初始化
	{ }																// 构造函数体内不需要任何动作
	本例中的 theName 以 name 为初值进行 copy 构造， theAddress 以 address 为初值进行 copy 构造， thePhones 以 phones 为初值进行 copy 构造。效率比第一个版本更高（先调用 defalut 构造函数， 然后调用 copy assignment 进行赋值）。
	对于内置类型 numTimesConsulted, 初始化和赋值的成本相同，为保持一致性，建议也放在初始化列表中
	
03	内置成员变量与初始化
	规定总是在初始化列表中列出所有成员变量，避免记住哪些成员变量可以无需初值
	如果成员变量是 const 或 reference 它们就一定需要初值。建议总是使用初始化列表，避免需要记住成员变量何时必须在初始化列表中初始化。
	对于一个 class 有多个构造函数，每个构造函数都有自己的初始化列表，可以合理地在初始化列表中遗漏一些“赋值与初始化成本相同”的成员变量，将他们的赋值操作放到一个 private 的函数内。
	成员初始化次序总是以其声明的次序被初始化。建议最好总是以其声明次序在初始化列表中列出成员变量。
	
04	不同编译单元内的 non-local static 对象的初始化次序
	static 对象：寿命从被构造出来知道程序结束为止，它们的析构函数会在 main（）结束时自动被调用
	编译单元 ：产出单一目标文件的源码，基本是单一源码文件加上含入的头文件（#include files）
	eg：如果某编译单元内的某个 non-local static 对象的初始化动作使用了另一个编译单元的某个 non-local static 对象，它所用的这个对象可能尚未被初始化。
	class FileSystem{
	public:
		...
		std::size_t numDisks() const;
		...
	};
	extern FileSystem tfs;				
	
	class Dirctory{
	public:
		Dirctory( params );
		...
	};
	Dirctory::Dirctory(params)
	{
		...
		std::size_t disks = tfs.numDisks();				// 使用 tfs 对象	
		...
	}
	Dirctory tempDir(params);
	除非 tfs 在 tempDir 之前被初始化，否则 tempDir 的构造函数会用到尚未初始化的 tfs。（对于 non-local static 对象的初始化次序无明确定义）
	将每个 non-local static 对象搬到自己的专属函数内（在此函数内被声明为 static），返回一个 reference 指向这些对象。
	然后用户调用这些函数。non-local static 被 local static替换了（Singleton 单例模式）
	函数内的 local static 对象会在“该函数被调用期间”“首次遇上该对象的定义式时”被初始化。如果未调用这些函数，也不会有构造和析构成本
	class FileSystem{...};
	FileSystem& tfs()
	{
		static FileSystem fs;
		return fs;										// 这个函数用来替换 tfs 对象，定义并初始化一个 local static 对象，返回一个reference
	}
	class Dirctory{...};
	Dirctory::Dirctory(params)
	{
		...
		std::size_t disks = tfs().numDisks();
		...
	}
	Dirctory& tempDir()
	{
		static Dirctory td;								// 这个函数用来替换 tempDir 对象，定义并初始化一个 local static 对象，返回一个reference
		return td;
	}
	修改之后，使用同前面相同。使用函数返回的 static 对象保证了初始化的次序
	在多线程换将下带有不确定性，在程序的单线程启动阶段，手动调用所有的 reference return 函数。
	
05	总结
	为内置类型进行手工初始化，因为 c++ 不保证初始化他们
	构造函数最好使用初始化列表，而不要在函数体内进行赋值操作，排列次序应同声明次序相同
	为免除“跨编译单元的初始化次序” 以 local static 替换 non-local static 对象
	
	
	
	
	