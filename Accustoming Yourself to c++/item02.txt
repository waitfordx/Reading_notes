尽量以const enum inline 取代#define （尽量以编译器替换预处理器）

01 	const 取代 #define 定义常量
	#define ASPECT_RATIO 1.653  --> const double AspectRatio = 1.653

02	定义常量指针
	常量定义通常放在头文件内（被不同源码包含），因此有必要将指针定义为一个常量的
		const char* authorName = "ming li";  --> const string authorName = "ming li";

03 	class 专属常量 
	为了将常量的作用域限制于 class 内， 必须让它成为 class 的一个成员
	为确保此常量至多只有一份实体， 必须让它成为一个 static 成员
	eg:
		class GamePlayer
		{
			private:
				static const int NumTurns = 5;		// 这里只是声明而非定义 （头文件） in-class 初值设定。
				int scores[NumTurns];
				...	
		};
		
		const int GamePlayer:;NumTurns;				// 类外进行定义 （需要取地址操作或编译器需要定义）（实现文件）
		
	无法利用 #define 创建一个 class 专属常量，因为 #define 并不重视作用域，不能提供任何封装性， 而 const 成员变量可以被封装
	
	将初值放在定义处 （较早编译器不支持 in-class 语法时）
	eg:
		class CostEstimate{
		private:
			static const double FudgeFactor;			// static class 常量声明， 头文件内
			...
		}；
		const double CostEstimate::FudgeFactor = 1.35 	// static class 常量定义（初值）， 位于实现文件内
		
	对于一个在编译期间需要 class 常量，又不支持 in-class 语法时， 可以使用 the enum hack 补偿做法。
	eg:
		class GamePlayer{
		private:
			enum { NumTurns = 5};						// 令 NumTurns 成为 5 的一个记号名称
			int scores[NumTurns];
			...			
		};
	
04	用 template inline 函数替代 #define 的宏函数
	eg:
		template<typename T>
		inline void callWithMax(const T& a, const T& b)	// 采用 pass-by-reference-to-const
		{
			f(a > b ? a : b); 
		}
		
	


	

